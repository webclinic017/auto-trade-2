"""
1.11 逻辑回归器的 Python 实现
"""

import numpy as np

np.random.seed(1)

X = np.array(
    [[0,1,0],              
    [1,0,0],              
    [1,1,1],              
    [0,1,1]])
    
y = np.array([[0,1,1,0]]).T

def sigmoid(x):    
    return 1/(1+np.exp(-x))

"""
到目前为止还算不错。现在，我们需要初始化参数[插图]。

在这个例子中，我们已经知道了[插图]的具体值。

但是在其它问题中，我们并不知道函数具体形式和权重。

所以，我们需要随机指定权重。

权重一般都是随机初始化，权重的均值为0，偏移量也默认设置为0。

NumPy 库 random 函数的输入是以数组的形式来定义随机矩阵的维度。

用random((3,1))创建一个3×1的矩阵。

默认情况下，生成的随机值都是在0和1之间，平均值为0.5，标准差为0.5。

如果我们希望生成随机数的均值为0，标准差为1，我们需要对之前生成的随机数乘2减1。

可以通过执行如下代码来实现：到目前为止还算不错。

现在，我们需要初始化参数[插图]。

在这个例子中，我们已经知道了[插图]的具体值。

但是在其它问题中，我们并不知道函数具体形式和权重。

所以，我们需要随机指定权重。

权重一般都是随机初始化，权重的均值为0，偏移量也默认设置为0。

NumPy库random函数的输入是以数组的形式来定义随机矩阵的维度。

用random((3,1))创建一个3×1的矩阵。

默认情况下，生成的随机值都是在0和1之间，平均值为0.5，标准差为0.5。

如果我们希望生成随机数的均值为0，标准差为1，我们需要对之前生成的随机数乘2减1。

可以通过执行如下代码来实现：
"""

W = 2*np.random.random((3,1)) - 1 

b = 0

# 线性运算
z = X.dot(W) + b

# 激活函数非线性运算
A = sigmoid(z)

print(A)

# [[ 0.60841366] 
# [ 0.45860596]
# [ 0.3262757 ]
# [ 0.36375058]]

"""
这个结果看起来根本不像我们期望的输出结果[插图]！

很明显，逻辑回归器描述了某个函数，但是这个函数与我们期望的函数相差甚远。

为了更好地近似我们期望的函数，我们需要调整权重[插图]和偏移量[插图]。

我们将会在1.12节“优化模型参数”来实现上述目标。
"""
